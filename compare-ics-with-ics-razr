diff --git a/core/java/android/provider/ContactsContract.java b/core/java/android/provider/ContactsContract.java
index 83acef8..c41439d 100644
--- a/core/java/android/provider/ContactsContract.java
+++ b/core/java/android/provider/ContactsContract.java
@@ -750,6 +750,8 @@ public final class ContactsContract {
         public static final String SYNC3 = "sync3";
         /** Generic column for use by sync adapters. */
         public static final String SYNC4 = "sync4";
+        /** Facebook contacts */
+        public static final String IS_RESTRICTED = "is_restricted";
     }
 
     /**
diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index 8931623..c015ba6 100755
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -737,6 +737,9 @@
     <!-- Timeout to wait for NTP server response. -->
     <integer name="config_ntpTimeout">20000</integer>
 
+    <!-- Use legacy USB device manager. -->
+    <bool name="config_usesLegacyUsbDeviceManager">false</bool>
+
     <!-- Default network policy warning threshold, in megabytes. -->
     <integer name="config_networkPolicyDefaultWarning">2048</integer>
 
@@ -766,13 +769,5 @@
 
     <!-- Workaround for devices with broken keyboards -->
     <bool name="config_forceDisableHardwareKeyboard">false</bool>
-   
-    <!-- Use legacy USB device manager. -->
-    <bool name="config_usesLegacyUsbDeviceManager">true</bool>
-
-    <!-- Contains a list of vendor specific services to start via ServiceManager.
-         Format for each item is: <path_to_service_jar_file>:<service_class_name> -->
-    <string-array name="config_vendorServices">
-    </string-array>
 
 </resources>
diff --git a/libs/hwui/ProgramCache.h b/libs/hwui/ProgramCache.h
index 805f63c..6a96ceb 100644
--- a/libs/hwui/ProgramCache.h
+++ b/libs/hwui/ProgramCache.h
@@ -253,7 +253,7 @@ struct ProgramDescription {
         if (isPoint) key |= programid(0x1) << PROGRAM_IS_POINT_SHIFT;
         if (isAA) key |= programid(0x1) << PROGRAM_HAS_AA_SHIFT;
         if (hasExternalTexture) key |= programid(0x1) << PROGRAM_HAS_EXTERNAL_TEXTURE_SHIFT;
-//        if (hasTextureTransform) key |= programid(0x1) << PROGRAM_HAS_TEXTURE_TRANSFORM_SHIFT;
+        if (hasTextureTransform) key |= programid(0x1) << PROGRAM_HAS_TEXTURE_TRANSFORM_SHIFT;
         return key;
     }
 
diff --git a/libs/ui/GraphicBufferAllocator.cpp b/libs/ui/GraphicBufferAllocator.cpp
index 521f766..f7c4f4e 100644
--- a/libs/ui/GraphicBufferAllocator.cpp
+++ b/libs/ui/GraphicBufferAllocator.cpp
@@ -97,21 +97,21 @@ status_t GraphicBufferAllocator::alloc(uint32_t w, uint32_t h, PixelFormat forma
         w = h = 1;
 
     // we have a h/w allocator and h/w buffer is requested
-    status_t err;
+    status_t err; 
 
 #ifdef MISSING_EGL_PIXEL_FORMAT_YV12
     if (format == HAL_PIXEL_FORMAT_YV12) {
-        format = HAL_PIXEL_FORMAT_RGB_565; // no rgbx on omap3
+	format = HAL_PIXEL_FORMAT_RGBX_8888;
     }
     if (usage & GRALLOC_USAGE_EXTERNAL_DISP) {
-        usage ^= GRALLOC_USAGE_EXTERNAL_DISP;
+	usage ^= GRALLOC_USAGE_EXTERNAL_DISP;
     }
 #endif
     err = mAllocDev->alloc(mAllocDev, w, h, format, usage, handle, stride);
 
     LOGW_IF(err, "alloc(%u, %u, %d, %08x, ...) failed %d (%s)",
             w, h, format, usage, err, strerror(-err));
-
+    
     if (err == NO_ERROR) {
         Mutex::Autolock _l(sLock);
         KeyedVector<buffer_handle_t, alloc_rec_t>& list(sAllocList);
diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index 08d9243..93ce70c 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -2,13 +2,8 @@ LOCAL_PATH:= $(call my-dir)
 
 include $(CLEAR_VARS)
 
-ifeq ($(BOARD_USES_AUDIO_LEGACY),true)
-LOCAL_SRC_FILES:= \
-    LibMedia_Helper_Dummy.cpp
-else
 LOCAL_SRC_FILES:= \
     AudioParameter.cpp
-endif
 LOCAL_MODULE:= libmedia_helper
 LOCAL_MODULE_TAGS := optional
 
@@ -57,7 +52,6 @@ ifeq ($(BOARD_USES_AUDIO_LEGACY),true)
         AudioParameter.cpp
 
     LOCAL_CFLAGS += -DUSES_AUDIO_LEGACY
-
     ifeq ($(BOARD_USE_KINETO_COMPATIBILITY),true)
         LOCAL_CFLAGS += -DUSE_KINETO_COMPATIBILITY
     endif
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index 3e4ad92..cdb4aa2 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -756,7 +756,7 @@ void AudioSystem::AudioPolicyServiceClient::binderDied(const wp<IBinder>& who) {
 #ifdef USES_AUDIO_LEGACY
 // use emulated popcount optimization
 // http://www.df.lth.se/~john_e/gems/gem002d.html
-extern "C" uint32_t _ZN7android11AudioSystem8popCountEj(uint32_t u)
+uint32_t AudioSystem::popCount(uint32_t u)
 {
     u = ((u&0x55555555) + ((u>>1)&0x55555555));
     u = ((u&0x33333333) + ((u>>2)&0x33333333));
@@ -766,26 +766,149 @@ extern "C" uint32_t _ZN7android11AudioSystem8popCountEj(uint32_t u)
     return u;
 }
 
-extern "C" bool _ZN7android11AudioSystem12isA2dpDeviceENS0_13audio_devicesE(uint32_t device)
+bool AudioSystem::isA2dpDevice(audio_devices device)
 {
-    if ((_ZN7android11AudioSystem8popCountEj(device) == 1 ) &&
-        (device & (0x80 | 0x100 | 0x200))) {
+    if ((popCount(device) == 1 ) &&
+        (device & (AUDIO_DEVICE_OUT_BLUETOOTH_A2DP |
+                   AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES |
+                   AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER))) {
         return true;
     } else {
         return false;
     }
 }
 
-extern "C" bool _ZN7android11AudioSystem13isInputDeviceENS0_13audio_devicesE(uint32_t device)
+bool AudioSystem::isInputDevice(audio_devices device)
+{
+    if ((popCount(device) == 1 ) &&
+        ((device & ~AUDIO_DEVICE_IN_ALL) == 0)) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool AudioSystem::isOutputDevice(audio_devices device)
 {
-    if ((_ZN7android11AudioSystem8popCountEj(device) == 1 ) &&
-        (device & ~0x81ff0000 == 0)) {
+    if ((popCount(device) == 1 ) &&
+        ((device & ~AUDIO_DEVICE_OUT_ALL) == 0)) {
         return true;
     } else {
         return false;
     }
 }
 
+#ifdef HAVE_FM_RADIO
+bool AudioSystem::isFmDevice(audio_devices device)
+{
+    if ((popCount(device) == 1 ) &&
+        ((device & ~AUDIO_DEVICE_OUT_FM_ALL) == 0)) {
+        return true;
+    } else {
+        return false;
+    }
+}
+#endif
+
+bool AudioSystem::isBluetoothScoDevice(audio_devices device)
+{
+    if ((popCount(device) == 1 ) &&
+        (device & (AUDIO_DEVICE_OUT_BLUETOOTH_SCO |
+                   AUDIO_DEVICE_OUT_BLUETOOTH_SCO_HEADSET |
+                   AUDIO_DEVICE_OUT_BLUETOOTH_SCO_CARKIT |
+                   AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET))) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool AudioSystem::isLowVisibility(stream_type stream)
+{
+    if (stream == AUDIO_STREAM_SYSTEM ||
+        stream == AUDIO_STREAM_NOTIFICATION ||
+        stream == AUDIO_STREAM_RING) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool AudioSystem::isInputChannel(uint32_t channel)
+{
+    if ((channel & ~AUDIO_CHANNEL_IN_ALL) == 0) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool AudioSystem::isOutputChannel(uint32_t channel)
+{
+    if ((channel & ~AUDIO_CHANNEL_OUT_ALL) == 0) {
+
+        return true;
+    } else {
+        return false;
+    }
+}
+
+bool AudioSystem::isValidFormat(uint32_t format)
+{
+    switch (format & AUDIO_FORMAT_MAIN_MASK) {
+    case         AUDIO_FORMAT_PCM:
+    case         AUDIO_FORMAT_MP3:
+    case         AUDIO_FORMAT_AMR_NB:
+    case         AUDIO_FORMAT_AMR_WB:
+    case         AUDIO_FORMAT_AAC:
+    case         AUDIO_FORMAT_HE_AAC_V1:
+    case         AUDIO_FORMAT_HE_AAC_V2:
+    case         AUDIO_FORMAT_VORBIS:
+        return true;
+    default:
+        return false;
+    }
+}
+
+bool AudioSystem::isLinearPCM(uint32_t format)
+{
+    switch (format) {
+    case         AUDIO_FORMAT_PCM_32_BIT:
+    case         AUDIO_FORMAT_PCM_16_BIT:
+    case         AUDIO_FORMAT_PCM_8_BIT:
+        return true;
+    default:
+        return false;
+    }
+}
+
+status_t AudioSystem::setDeviceConnectionState(audio_devices device,
+                                                  device_connection_state state,
+                                                  const char *device_address) {
+    return setDeviceConnectionState((audio_devices_t)device, (audio_policy_dev_state_t)state, device_address);
+}
+
+AudioSystem::device_connection_state AudioSystem::getDeviceConnectionState(audio_devices device,
+                                                  const char *device_address) {
+    return (device_connection_state)getDeviceConnectionState((audio_devices_t)device, device_address);
+}
+
+/*
+extern "C" uint32_t _ZN7android11AudioSystem8popCountEj(uint32_t u)
+{
+    return popcount(u);
+}
+
+extern "C" bool _ZN7android11AudioSystem12isA2dpDeviceENS0_13audio_devicesE(uint32_t device)
+{
+    return audio_is_a2dp_device((audio_devices_t)device);
+}
+
+extern "C" bool _ZN7android11AudioSystem13isInputDeviceENS0_13audio_devicesE(uint32_t device)
+{
+    return audio_is_input_device((audio_devices_t)device);
+}
+
 extern "C" bool _ZN7android11AudioSystem14isOutputDeviceENS0_13audio_devicesE(uint32_t device)
 {
     return audio_is_output_device((audio_devices_t)device);
@@ -798,7 +921,7 @@ extern "C" bool _ZN7android11AudioSystem20isBluetoothScoDeviceENS0_13audio_devic
 
 extern "C" status_t _ZN7android11AudioSystem24setDeviceConnectionStateENS0_13audio_devicesENS0_23device_connection_stateEPKc(audio_devices_t device,
                                                audio_policy_dev_state_t state,
-                                               const char *device_address) 
+                                               const char *device_address)
 {
     return AudioSystem::setDeviceConnectionState(device, state, device_address);
 }
@@ -807,7 +930,7 @@ extern "C" audio_io_handle_t _ZN7android11AudioSystem9getOutputENS0_11stream_typ
                                     uint32_t samplingRate,
                                     uint32_t format,
                                     uint32_t channels,
-                                    audio_policy_output_flags_t flags) 
+                                    audio_policy_output_flags_t flags)
 {
    return AudioSystem::getOutput(stream,samplingRate,format,channels>>2,flags);
 }
@@ -827,26 +950,27 @@ extern "C" bool _ZN7android11AudioSystem15isLowVisibilityENS0_11stream_typeE(aud
         return false;
     }
 }
+*/
 
-#endif // AUDIO_LEGACY
+#endif /* USES_AUDIO_LEGACY */
 
 #ifdef YAMAHAPLAYER
 extern "C" bool _ZN7android11AudioSystem17isSeparatedStreamE19audio_stream_type_t(audio_stream_type_t stream)
 {
-	LOGD("android::AudioSystem::isSeparatedStream(audio_stream_type_t) called!");
-	LOGD("audio_stream_type_t: %d", stream);
-	
-	/* this is the correct implementation, but breaks headset volume rocker.
-	 i f (stream == 3  |*| stream == 9  || stream == 10
-	 || stream == 12 || stream == 13 || stream == 14)
-	{
-		LOGD("isSeparatedStream: true");
-	return true;
-}
+    LOGD("android::AudioSystem::isSeparatedStream(audio_stream_type_t) called!");
+    LOGD("audio_stream_type_t: %d", stream);
+
+/* this is the correct implementation, but breaks headset volume rocker.
+    if (stream == 3  || stream == 9  || stream == 10
+     || stream == 12 || stream == 13 || stream == 14)
+    {
+        LOGD("isSeparatedStream: true");
+        return true;
+    }
 */
-	
-	LOGD("isSeparatedStream: false");
-	return false;
+
+    LOGD("isSeparatedStream: false");
+    return false;
 }
 #endif // YAMAHAPLAYER
 
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 000bebf..1fa3e32 100755
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -1180,7 +1180,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     void readLidState() {
         try {
             int sw = mWindowManager.getSwitchState(SW_LID);
-			if (sw > 0) {
+            if (sw > 0) {
                 mLidOpen = LID_CLOSED;
             } else if (sw == 0) {
                 mLidOpen = LID_OPEN;
diff --git a/services/audioflinger/Android.mk b/services/audioflinger/Android.mk
index dd33cd0..71ac5b0 100644
--- a/services/audioflinger/Android.mk
+++ b/services/audioflinger/Android.mk
@@ -30,10 +30,6 @@ LOCAL_STATIC_LIBRARIES := \
 
 LOCAL_MODULE:= libaudioflinger
 
-ifeq ($(BOARD_USES_AUDIO_LEGACY),true)
-    LOCAL_CFLAGS += -DUSES_AUDIO_LEGACY
-endif
-
 ifeq ($(BOARD_USE_MOTO_DOCK_HACK),true)
    LOCAL_CFLAGS += -DMOTO_DOCK_HACK
 endif
diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 171be55..fcae6ec 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -4941,15 +4941,12 @@ int AudioFlinger::openOutput(uint32_t *pDevices,
         AudioStreamOut *output = new AudioStreamOut(outHwDev, outStream);
         int id = nextUniqueId();
 
-#ifndef USES_AUDIO_LEGACY
         if ((flags & AUDIO_POLICY_OUTPUT_FLAG_DIRECT) ||
             (format != AUDIO_FORMAT_PCM_16_BIT) ||
             (channels != AUDIO_CHANNEL_OUT_STEREO)) {
             thread = new DirectOutputThread(this, output, id, *pDevices);
             LOGV("openOutput() created direct output: ID %d thread %p", id, thread);
-        } else 
-#endif  
-        {
+        } else {
             thread = new MixerThread(this, output, id, *pDevices);
             LOGV("openOutput() created mixer output: ID %d thread %p", id, thread);
         }
diff --git a/services/java/com/android/server/PowerManagerService.java b/services/java/com/android/server/PowerManagerService.java
index 251c32a..2794e05 100644
--- a/services/java/com/android/server/PowerManagerService.java
+++ b/services/java/com/android/server/PowerManagerService.java
@@ -103,7 +103,7 @@ public class PowerManagerService extends IPowerManager.Stub
     private static final int LONG_DIM_TIME = 7000;              // t+N-5 sec
 
     // How long to wait to debounce light sensor changes in milliseconds
-    private static final int LIGHT_SENSOR_DELAY = 2000;
+    private static final int LIGHT_SENSOR_DELAY = 4000;
 
     // light sensor events rate in microseconds
     private static final int LIGHT_SENSOR_RATE = 1000000;
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 7d31c89..bb1cebd 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -22,7 +22,6 @@ import android.bluetooth.BluetoothAdapter;
 import android.content.ComponentName;
 import android.content.ContentResolver;
 import android.content.ContentService;
-import android.content.ContextWrapper;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.IPackageManager;
@@ -31,7 +30,6 @@ import android.database.ContentObserver;
 import android.database.Cursor;
 import android.media.AudioService;
 import android.net.wifi.p2p.WifiP2pService;
-import android.os.IBinder;
 import android.os.Looper;
 import android.os.RemoteException;
 import android.os.ServiceManager;
@@ -59,14 +57,12 @@ import com.android.server.pm.PackageManagerService;
 import com.android.server.usb.UsbService;
 import com.android.server.wm.WindowManagerService;
 
-import dalvik.system.DexClassLoader;
 import dalvik.system.VMRuntime;
 import dalvik.system.Zygote;
 
 import java.io.File;
 import java.util.Timer;
 import java.util.TimerTask;
-import java.lang.reflect.Constructor;
 
 class ServerThread extends Thread {
     private static final String TAG = "SystemServer";
@@ -592,40 +588,6 @@ class ServerThread extends Thread {
             } catch (Throwable e) {
                 reportWtf("starting NetworkTimeUpdate service", e);
             }
-
-            String[] vendorServices = context.getResources().getStringArray(
-                    com.android.internal.R.array.config_vendorServices);
-
-            if (vendorServices != null && vendorServices.length > 0) {
-                String cachePath = new ContextWrapper(context).getCacheDir().getAbsolutePath();
-                ClassLoader parentLoader = ClassLoader.getSystemClassLoader();
-
-                for (String service : vendorServices) {
-                    String[] parts = service.split(":");
-                    if (parts.length != 2) {
-                        Slog.e(TAG, "Found invalid vendor service " + service);
-                        continue;
-                    }
-
-                    String jarPath = parts[0];
-                    String className = parts[1];
-
-                    try {
-                        /* Intentionally skipping all null checks in this block, as we also want an
-                           error message if class loading or ctor resolution failed. The catch block
-                           conveniently provides that for us also for NullPointerException */
-                        DexClassLoader loader = new DexClassLoader(jarPath, cachePath, null, parentLoader);
-                        Class<?> klass = loader.loadClass(className);
-                        Constructor<?> ctor = klass.getDeclaredConstructors()[0];
-                        Object instance = ctor.newInstance(context);
-
-                        ServiceManager.addService(klass.getSimpleName(), (IBinder) instance);
-                        Slog.i(TAG, "Vendor service " + className + " started.");
-                    } catch (Exception e) {
-                        Slog.e(TAG, "Starting vendor service " + className + " failed.", e);
-                    }
-                }
-            }
         }
 
         // make sure the ADB_ENABLED setting value matches the secure property value
diff --git a/services/java/com/android/server/usb/LegacyUsbDeviceManager.java b/services/java/com/android/server/usb/LegacyUsbDeviceManager.java
index 5a856ce..44b86ad 100644
--- a/services/java/com/android/server/usb/LegacyUsbDeviceManager.java
+++ b/services/java/com/android/server/usb/LegacyUsbDeviceManager.java
@@ -75,8 +75,7 @@ public class LegacyUsbDeviceManager extends UsbDeviceManager {
     private static final String FUNCTIONS_PATH =
             "/sys/devices/virtual/usb_composite/";
     private static final String MASS_STORAGE_FILE_PATH =
-            //Resources.getSystem().getString(com.android.internal.R.string.config_legacyUmsLunFile);
-            "/sys/devices/platform/usb_mass_storage/lun0/file";
+            Resources.getSystem().getString(com.android.internal.R.string.config_legacyUmsLunFile);
 
     private static final int MSG_UPDATE_STATE = 0;
     private static final int MSG_ENABLE_ADB = 1;
@@ -414,7 +413,7 @@ public class LegacyUsbDeviceManager extends UsbDeviceManager {
                 setEnabledFunctions(mDefaultFunctions, true);
                 updateAdbNotification();
             }
-        SystemProperties.set("persist.service.adb.enable", enable ? "1":"0");
+            SystemProperties.set("persist.service.adb.enable", enable ? "1":"0");
         }
 
         private void setEnabledFunctions(String functions, boolean makeDefault) {
@@ -641,10 +640,10 @@ public class LegacyUsbDeviceManager extends UsbDeviceManager {
             }
         }
     }
-  /*  @Override
+
+    @Override
     public void setCurrentFunction(String function, boolean makeDefault) {
         if (DEBUG) Slog.d(TAG, "setCurrentFunction(" + function + ") default: " + makeDefault);
         mHandler.sendMessage(MSG_SET_CURRENT_FUNCTION, function, makeDefault);
-    }*/
-
+    }
 }
diff --git a/services/java/com/android/server/usb/UsbService.java b/services/java/com/android/server/usb/UsbService.java
index 84daa7e..ce8206c 100644
--- a/services/java/com/android/server/usb/UsbService.java
+++ b/services/java/com/android/server/usb/UsbService.java
@@ -54,7 +54,7 @@ public class UsbService extends IUsbManager.Stub {
         if (new File("/sys/class/android_usb").exists()) {
             mDeviceManager = new UsbDeviceManager(context, mSettingsManager);
         }
-        else if(Resources.getSystem().getBoolean(com.android.internal.R.bool.config_usesLegacyUsbDeviceManager))
+        else if(new File(Resources.getSystem().getString(com.android.internal.R.string.config_legacyUmsLunFile)).exists())
             mDeviceManager = new LegacyUsbDeviceManager(context, mSettingsManager);
     }
 
diff --git a/services/jni/com_android_server_BatteryService.cpp b/services/jni/com_android_server_BatteryService.cpp
index f8d57f5..03ba75e 100644
--- a/services/jni/com_android_server_BatteryService.cpp
+++ b/services/jni/com_android_server_BatteryService.cpp
@@ -180,22 +180,17 @@ static void setIntField(JNIEnv* env, jobject obj, const char* path, jfieldID fie
     env->SetIntField(obj, fieldID, value);
 }
 
-static void setPercentageField(JNIEnv* env, jobject obj, const char* path, jfieldID fieldID)
+// FIXME-HASH: Check for a max value (used in mBatteryLevel)
+static void setIntFieldMax(JNIEnv* env, jobject obj, const char* path, jfieldID fieldID, int maxValue)
 {
     const int SIZE = 128;
     char buf[SIZE];
-
+    
     jint value = 0;
     if (readFromFile(path, buf, SIZE) > 0) {
         value = atoi(buf);
     }
-    /* sanity check for buggy drivers that provide bogus values, e.g. 103% */
-    if (value < 0) {
-        value = 0;
-    } else if (value > 100) {
-        value = 100;
-    }
-
+    if (value > maxValue) value = maxValue;
     env->SetIntField(obj, fieldID, value);
 }
 
@@ -219,7 +214,7 @@ static void android_server_BatteryService_update(JNIEnv* env, jobject obj)
     setBooleanField(env, obj, gPaths.usbOnlinePath, gFieldIds.mUsbOnline);
     setBooleanField(env, obj, gPaths.batteryPresentPath, gFieldIds.mBatteryPresent);
     
-    setPercentageField(env, obj, gPaths.batteryCapacityPath, gFieldIds.mBatteryLevel);
+    setIntFieldMax(env, obj, gPaths.batteryCapacityPath, gFieldIds.mBatteryLevel, 100);
     setVoltageField(env, obj, gPaths.batteryVoltagePath, gFieldIds.mBatteryVoltage);
     setIntField(env, obj, gPaths.batteryTemperaturePath, gFieldIds.mBatteryTemperature);
     
@@ -290,7 +285,9 @@ int register_android_server_BatteryService(JNIEnv* env)
                 snprintf(path, sizeof(path), "%s/%s/present", POWER_SUPPLY_PATH, name);
                 if (access(path, R_OK) == 0)
                     gPaths.batteryPresentPath = strdup(path);
-                snprintf(path, sizeof(path), "%s/%s/capacity", POWER_SUPPLY_PATH, name);
+                // 1% battery mod
+                snprintf(path, sizeof(path), "%s/%s/charge_counter", POWER_SUPPLY_PATH, name);
+                //snprintf(path, sizeof(path), "%s/%s/capacity", POWER_SUPPLY_PATH, name);
                 if (access(path, R_OK) == 0)
                     gPaths.batteryCapacityPath = strdup(path);
 
@@ -415,3 +412,4 @@ int register_android_server_BatteryService(JNIEnv* env)
 }
 
 } /* namespace android */
+
diff --git a/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp b/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp
index eb0136e..f509698 100644
--- a/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp
+++ b/services/surfaceflinger/DisplayHardware/DisplayHardware.cpp
@@ -21,8 +21,6 @@
 
 #include <cutils/properties.h>
 
-#define LOG_NDEBUG 0
-
 #include <utils/RefBase.h>
 #include <utils/Log.h>
 
@@ -113,43 +111,15 @@ static status_t selectConfigForPixelFormat(
     eglGetConfigs(dpy, NULL, 0, &numConfigs);
     EGLConfig* const configs = new EGLConfig[numConfigs];
     eglChooseConfig(dpy, attrs, configs, numConfigs, &n);
-
-    LOGD("Wanted surface format = %x", format);
-    EGLint a, g, alpha = 8, green = 8;
-    switch (format) {
-        case HAL_PIXEL_FORMAT_RGBA_8888:
-        case HAL_PIXEL_FORMAT_RGBX_8888:
-        case HAL_PIXEL_FORMAT_BGRA_8888:
-            break;
-        case HAL_PIXEL_FORMAT_RGBA_5551:
-            alpha = 1;
-            green = 5;
-            break;
-        case HAL_PIXEL_FORMAT_RGBA_4444:
-            alpha = 4;
-            green = 4;
-            break;
-        case HAL_PIXEL_FORMAT_RGB_565:
-            green = 6;
-            alpha = 0;
-            break;
-    }
-
     for (int i=0 ; i<n ; i++) {
-
         EGLint nativeVisualId = 0;
         eglGetConfigAttrib(dpy, configs[i], EGL_NATIVE_VISUAL_ID, &nativeVisualId);
-        eglGetConfigAttrib(dpy, configs[i], EGL_ALPHA_SIZE, &a);
-        eglGetConfigAttrib(dpy, configs[i], EGL_GREEN_SIZE, &g);
-
-        if (a == alpha && g == green) {
+        if (nativeVisualId>0 && format == nativeVisualId) {
             *outConfig = configs[i];
             delete [] configs;
             return NO_ERROR;
         }
-
     }
-
     delete [] configs;
     return NAME_NOT_FOUND;
 }
diff --git a/telephony/java/com/android/internal/telephony/IccConstants.java b/telephony/java/com/android/internal/telephony/IccConstants.java
index 1ba6dfe..835121d 100644
--- a/telephony/java/com/android/internal/telephony/IccConstants.java
+++ b/telephony/java/com/android/internal/telephony/IccConstants.java
@@ -41,6 +41,9 @@ public interface IccConstants {
     static final int EF_SST = 0x6f38;
     static final int EF_CFIS = 0x6FCB;
     static final int EF_IMG = 0x4f20;
+    // FIXME-HASH: Added for Motorola
+    static final int EF_OPL = 0x6fc6;  // 28614
+    static final int EF_SMSP = 0x6f42; // 28482
 
     // USIM SIM file ids from TS 31.102
     public static final int EF_PBR = 0x4F30;
diff --git a/telephony/java/com/android/internal/telephony/IccFileHandler.java b/telephony/java/com/android/internal/telephony/IccFileHandler.java
index 93b9b79..64d8be8 100644
--- a/telephony/java/com/android/internal/telephony/IccFileHandler.java
+++ b/telephony/java/com/android/internal/telephony/IccFileHandler.java
@@ -533,6 +533,8 @@ public abstract class IccFileHandler extends Handler implements IccConstants {
             return MF_SIM;
         case EF_IMG:
             return MF_SIM + DF_TELECOM + DF_GRAPHICS;
+        case EF_PBR:
+            return MF_SIM + DF_TELECOM + DF_PHONEBOOK;
         }
         return null;
     }
diff --git a/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java b/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java
index fde269d..4ad7433 100644
--- a/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java
+++ b/telephony/java/com/android/internal/telephony/MotoWrigley3GRIL.java
@@ -32,7 +32,6 @@ import java.util.Collections;
  *
  * {@hide}
  */
-//public class MotoWrigley3GRIL extends RIL implements CommandsInterface {
 public class MotoWrigley3GRIL extends RIL {
 
     public MotoWrigley3GRIL(Context context, int networkMode, int cdmaSubscription) {
diff --git a/telephony/java/com/android/internal/telephony/cdma/CDMAPhone.java b/telephony/java/com/android/internal/telephony/cdma/CDMAPhone.java
index 77686c3..5ff5a41 100755
--- a/telephony/java/com/android/internal/telephony/cdma/CDMAPhone.java
+++ b/telephony/java/com/android/internal/telephony/cdma/CDMAPhone.java
@@ -313,7 +313,7 @@ public class CDMAPhone extends PhoneBase {
     }
 
     public void setMute(boolean muted) {
-        if (mCT == null) {
+        if (mCT != null) {
             mCT.setMute(muted);
         }
     }
diff --git a/telephony/java/com/android/internal/telephony/gsm/GSMPhone.java b/telephony/java/com/android/internal/telephony/gsm/GSMPhone.java
index 9651884..08b16e0 100644
--- a/telephony/java/com/android/internal/telephony/gsm/GSMPhone.java
+++ b/telephony/java/com/android/internal/telephony/gsm/GSMPhone.java
@@ -983,7 +983,9 @@ public class GSMPhone extends PhoneBase {
     }
 
     public void setCallWaiting(boolean enable, Message onComplete) {
-        mCM.setCallWaiting(enable, CommandsInterface.SERVICE_CLASS_VOICE, onComplete);
+        if (mCM != null) {
+            mCM.setCallWaiting(enable, CommandsInterface.SERVICE_CLASS_VOICE, onComplete);
+        }
     }
 
     public void
@@ -1047,10 +1049,13 @@ public class GSMPhone extends PhoneBase {
     }
 
     public void setMute(boolean muted) {
-        mCT.setMute(muted);
+        if (mCT != null) {
+            mCT.setMute(muted);
+        }
     }
 
     public boolean getMute() {
+        if (mCT == null) return false;
         return mCT.getMute();
     }
 
